# !/usr/bin/env python
#!/usr/bin/env python
#
# esxplot - explore and plot data generated by the esxtop utility when
# run in 'batch' mode. This program uses the cross platform wxPython
# Window System so it should run on any Windows, Linux, or Mac OSX system
# that has Python >= 2.6 and with wxPython >= 2.8 installed

import sys
import os
import wx
import csv
import exp_mylog
from optparse import OptionParser
from exp_myframe import MyFrame
import esxp_datasource



class MyApp(wx.App):
    '''Our application class (basically main() )
    '''
    def OnInit(self):
        '''Initialize by creating the split window with the tree.  Also
        determine the type of OS we are running on and process any
        cli command args that may have been passed. Read in the 
        csv file and set up datastructures.
        '''
        # discover what kind of OS we are running on
        isWindowsG = True if os.name == 'nt' else False

        # process command line arguments
        parser = OptionParser(usage="usage: %prog [options] [dataset]")
        parser.add_option("-d", "--debug", dest="debug",
                          action="store_true", default=False,
                          help="output logs to the console")
        parser.add_option("-l", "--logpath", dest="logpath",
                          type="string", default=None,
                          help="path to write the logfiles to")
        (opts, args) = parser.parse_args()

        if isWindowsG:
            logfile_path = os.path.expanduser("~") +\
                "\Local Settings\Application Data\esxplot"
            logfile_name = "\esxplot.log"
        else:
            logfile_path = os.path.expanduser("~") + "/.esxplot"
            logfile_name = "/esxplot.log"
        if opts.debug:
            logfile_path = None

        if opts.logpath:
            logfile_path = opts.logpath
        if logfile_path:
            if not os.access(logfile_path, os.F_OK):
                try:
                    os.makedirs(logfile_path, 0744)
                    self.log = exp_mylog.logg('esxplot',llevel="WARN",
                          lfile=logfile_path+logfile_name)
                except:
                    print("Can't create log file in %s logging to console" % logfile_path)
                    self.log = exp_mylog.logg('esxplot', llevel="INFO", cnsl=True)
            else:
                self.log = exp_mylog.logg('esxplot',llevel="INFO", lfile=logfile_path+logfile_name)
        else:
            self.log = exp_mylog.logg('esxplot', llevel="INFO", cnsl=True)

        self.log.info("Start run esxplot")

        if len(args) == 0:   # called with no arguments, just start the GUI
            v = None
        else:     # must have a filename argument, check it and read the data
            if os.path.exists(args[0]) == False:
                self.log.warn("?File not found - " + args[0])
                self._errstop()
            else:
                try:
                    v = esxp_datasource.DataSource(args[0])
                except (ValueError , csv.Error):
                    self.log.error("?File does not seem to be an esxtop data set - " + \
                        args[0])
                    self._errstop()
        frame = MyFrame(None, -1, 'esxplot', v)
        frame.Show(True)
        self.SetTopWindow(frame)
        return True

    def _errstop(self):
        sys.stdout = self.savestdout
        sys.stderr = self.savestderr
        self.log.error(" Stop run esxplot")
        exit(2)


def main():
    #Sorta the main program
    app = MyApp(0)
    app.MainLoop()
    #sys.stdout = app.savestdout

if __name__ == '__main__':

    main()